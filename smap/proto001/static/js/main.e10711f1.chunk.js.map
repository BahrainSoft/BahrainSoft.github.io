{"version":3,"sources":["fabric/Canvas.tsx","fabric/Rect.tsx","fabric/Triangle.tsx","fabric/Ellipse.tsx","proto/containers/Prototype001.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Canvas","props","state","canvas","fabric","this","setState","childrenWithProps","React","Children","map","children","child","cloneElement","width","padding","height","sizeCss","style","verticalAlign","boxShadow","background","id","Component","Rect","rect","add","Triangle","triangle","fabricObject","Ellipse","Prototype001","shadow","top","left","angle","fill","lockRotation","lockMovementY","rx","ry","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA+DeA,E,YApDb,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KAEDC,MAAQ,CAAEC,OAAQ,MAHD,E,iFAOtB,IAAIA,EAAwB,IAAIC,SAAOJ,OAAO,UAC9CK,KAAKC,SAAS,CAAEH,OAAQA,M,+BAGhB,IAAD,OACHI,EAAoBC,IAAMC,SAASC,IAAIL,KAAKJ,MAAMU,UAAU,SAAAC,GAC9D,OAAOJ,IAAMK,aAAaD,EAAkC,CAC1DT,OAAQ,EAAKD,MAAMC,YAMnBW,EAAQT,KAAKJ,MAAMa,MAAQC,GAC3BC,EAASX,KAAKJ,MAAMe,OAASD,GAC7BE,EAAyB,CAC3BH,MAAOA,EACPE,OAAQA,GAGV,OACE,6BACE,yBAAKE,MAAO,CAAEH,QAXP,GAWyBI,cAAe,QAC7C,yBACED,MAAK,aACHE,UAAW,yBACXC,WAAWhB,KAAKJ,MAAMoB,YACnBJ,IAIL,4BACEK,GAAG,SACHR,MAAOA,EACPE,OAAQA,MAKbT,O,GAtDYgB,aCMNC,EANF,SAACvB,GAAyB,IAAD,EAChCwB,EAAO,IAAIrB,SAAOoB,KAAKvB,GAE3B,OADA,UAAAA,EAAME,cAAN,SAAcuB,IAAID,GACX,MCGME,EANE,SAAC1B,GAA4B,IAAD,EACvC2B,EAAW,IAAIxB,SAAOuB,SAAS1B,GAEnC,OADA,UAAAA,EAAME,cAAN,SAAcuB,IAAIE,GACX,MCGMJ,EANF,SAACvB,GAA4B,IAAD,EACnC4B,EAAe,IAAIzB,SAAO0B,QAAQ7B,GAEtC,OADA,UAAAA,EAAME,cAAN,SAAcuB,IAAIG,GACX,MCeME,EAfM,WACnB,IAAIC,EAAS,oBACb,OACE,6BACE,kBAAC,EAAD,CAAQlB,MAAO,KAAME,OAAQ,IAAKK,WAAW,QAC3C,kBAAC,EAAD,CAAMY,IAAK,GAAIC,KAAM,GAAIpB,MAAO,IAAKE,OAAQ,GAAImB,MAAO,GAAIC,KAAK,OAAOJ,OAAQA,IAChF,kBAAC,EAAD,CAAMC,IAAK,IAAKC,KAAM,IAAKpB,MAAO,IAAKE,OAAQ,GAAIoB,KAAK,OAAOC,cAAc,EAAML,OAAQA,IAC3F,kBAAC,EAAD,CAAMC,IAAK,IAAKC,KAAM,IAAKpB,MAAO,IAAKE,OAAQ,IAAKoB,KAAK,OAAOC,cAAc,EAAML,OAAQA,IAC5F,kBAAC,EAAD,CAAUC,IAAK,IAAKC,KAAM,IAAKpB,MAAO,IAAKE,OAAQ,IAAKoB,KAAK,OAAOE,eAAe,EAAMN,OAAQA,IACjG,kBAACF,EAAD,CAASG,IAAK,IAAKC,KAAM,IAAKK,GAAI,GAAIC,GAAI,GAAIJ,KAAK,OAAOJ,OAAQA,OCF3DS,EARO,WACpB,OACE,yBAAKC,UAAU,oBACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e10711f1.chunk.js","sourcesContent":["import React, { Component, CSSProperties } from \"react\";\r\nimport { fabric } from \"fabric\";\r\n\r\nclass Canvas extends Component<\r\n  {\r\n    width: number;\r\n    height: number;\r\n    background?: string;\r\n  },\r\n  any\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = { canvas: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas: fabric.Canvas = new fabric.Canvas(\"canvas\");\r\n    this.setState({ canvas: canvas });\r\n  }\r\n\r\n  render() {\r\n    let childrenWithProps = React.Children.map(this.props.children, child => {\r\n      return React.cloneElement(child as React.ReactElement<any>, {\r\n        canvas: this.state.canvas\r\n      });\r\n    });\r\n\r\n    let grid = 16;\r\n    let padding = grid;\r\n    let width = this.props.width - padding * 2;\r\n    let height = this.props.height - padding * 2;\r\n    let sizeCss: CSSProperties = {\r\n      width: width,\r\n      height: height\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div style={{ padding: padding, verticalAlign: \"top\" }}>\r\n          <div\r\n            style={{\r\n              boxShadow: \"2px 2px 16px #00000055\",\r\n              background:this.props.background,\r\n              ...sizeCss\r\n              // display: \"inline-block\"\r\n            }}\r\n          >\r\n            <canvas\r\n              id=\"canvas\"\r\n              width={width}\r\n              height={height}\r\n              //style={sizeCss}\r\n            ></canvas>\r\n          </div>\r\n        </div>\r\n        {childrenWithProps}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import { fabric } from \"fabric\";\r\nimport { IRectOptions } from \"fabric/fabric-impl\";\r\n\r\nconst Rect = (props: IRectOptions) => {\r\n  let rect = new fabric.Rect(props);\r\n  props.canvas?.add(rect);\r\n  return null;\r\n};\r\n\r\nexport default Rect;\r\n","import { fabric } from \"fabric\";\r\nimport { ITriangleOptions } from \"fabric/fabric-impl\";\r\n\r\nconst Triangle = (props:ITriangleOptions) => {\r\n  let triangle = new fabric.Triangle(props);\r\n  props.canvas?.add(triangle);\r\n  return null;\r\n};\r\n\r\nexport default Triangle;\r\n","import { fabric } from \"fabric\";\r\nimport { IEllipseOptions } from \"fabric/fabric-impl\";\r\n\r\nconst Rect = (props: IEllipseOptions) => {\r\n  let fabricObject = new fabric.Ellipse(props);\r\n  props.canvas?.add(fabricObject);\r\n  return null;\r\n};\r\n\r\nexport default Rect;\r\n","import React from \"react\";\r\nimport Canvas from \"../../fabric/Canvas\";\r\nimport Rect from \"../../fabric/Rect\";\r\nimport Triangle from \"../../fabric/Triangle\";\r\nimport Ellipse from \"../../fabric/Ellipse\";\r\n\r\nconst Prototype001 = () => {\r\n  let shadow = \"2px 2px 13px #000\";\r\n  return (\r\n    <div>\r\n      <Canvas width={1920} height={800} background=\"#ddd\">\r\n        <Rect top={10} left={20} width={150} height={80} angle={10} fill=\"#c44\" shadow={shadow} />\r\n        <Rect top={450} left={750} width={250} height={50} fill=\"#44c\" lockRotation={true} shadow={shadow}/>\r\n        <Rect top={550} left={350} width={250} height={150} fill=\"#cc4\" lockRotation={true} shadow={shadow}/>\r\n        <Triangle top={330} left={200} width={150} height={150} fill=\"#4c4\" lockMovementY={true} shadow={shadow} />\r\n        <Ellipse top={100} left={500} rx={80} ry={40} fill=\"#4cc\" shadow={shadow}/>\r\n      </Canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Prototype001;\r\n","import React from \"react\";\r\nimport Prototype000_1 from \"./proto/containers/Prototype000_1\";\r\nimport Prototype000 from \"./proto/containers/Prototype000\";\r\nimport Prototype001 from \"./proto/containers/Prototype001\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"Strategy-Map-App\">\r\n      <Prototype001 />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}